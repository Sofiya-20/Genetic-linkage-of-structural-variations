
Methods
Allelic information and SNP frequencies were extracted for SNPs associated with cis-eQTLs (n = 16,808 genes; test set). For the control set, SNPs were selected within ±1 Mb of genes without cis-eQTLs (n = 7,777 genes).. To ensure comparability, control SNPs were selected based on the minor allele frequency (MAF) spectrum of cis-eQTLs.
SNP frequencies were obtained using PLINK v1.90b4 (Purcell et al., 2007) and the MAF values were extracted from the resulting frequency file. MAF bins were defined for both cis-eQTL and control sets. For each bin, a target proportion was calculated as the number of cis-eQTL SNPs in that bin divided by the total number of cis-eQTL SNPs. A pool proportion was similarly calculated from the full control SNP pool. Bin-specific weights were then derived as wbin=target proportion/ pool proportion.
Candidate SNPs were subsequently joined with weighted bins, and one SNP per gene was sampled by grouping on gene ID for the control set. Gene coordinates were obtained from the Zm-B73-REFERENCE-NAM-5.0 genome assembly (Phytozome). Structural variant (SV) data were downloaded from the CyVerse Data Commons (Hufford et al., 2021):
https://datacommons.cyverse.org/browse/iplant/home/shared/NAM/NAM_genome_and_annotation_Jan2021_release.
For each gene, a 2 kb upstream promoter region was defined, and overlapping SVs were considered potentially regulatory. Each SV was assigned a unique identifier based on genomic position and variant type. SNPs were filtered to retain only those with minor alleles present in 3–11 NAM founder genotypes. After filtering, 7,859 genes remained in the cis-eQTL set and 2,942 genes in the control set.Similarly, overlapping SVs were filtered to be present in atleast 3 genotypes and at maximum in 11 genotypes. 
Enrichment of perfect SV–allele associations was tested using Fisher’s exact test, yielding a significant result (p = 7.09 × 10⁻²⁸). All genomic interval operations were performed in R v4.4.4 using the GenomicRanges package (Bioconductor v3.20). Gene and SV coordinates were formatted as GRanges objects, and overlaps were computed using the findOverlaps() function.

